UNIVERSITY OF HELSINKI
JAVA PROGRAMMING II NOTES

### PART 8
HASH MAP
A data structure that stores a list of key-value pairs. (Compare: dictionaries in Python.)
* It exists in Java as HashMap<>(): import with java.util.HashMap
* You can set the data type of keys and values seperately:
HashMap<String, Integer> hash = new HashMap<>();
* Only one key/value pair at a time: a reassignment wipes the old value

ADD: hash.put("five", 3);
GET: hash.get("five"); retrieves the VALUE of "five" which is 3

WHEN TO USE:
* it's best to use hash maps when you know exactly what you're looking for: if you have to search based on a partial key, then it'll probably take longer and up that Big O rating since it's got to iterate
* lists are still good to sort and keep order of items

REFERENCE VARIABLES:
Anything put into a hashmap is automatically converted into a reference variable. Remember that this REFERENCES a spot in memory, it's not the actual piece of memory. Primitive is the actual spot.
int = Integer (reference)
* You CAN convert between types but it can get a little risky.
* Make sure to use getOrDefault to handle potential null cases.
	
SIMILARITY OF OBJECTS
-The 'equals' method compares the references of two objects and returns true if it's the same. Only that - even if the objects have the same values. (The String class has a version of this for identical strings.)
--As a result, we often need to build our own equals methods in objects if we want to compare them.
	=> You can compare this == object, or see if object instanceof [Object]
--Classes like ArrayList and HashMap have their own versions of these methods. Stuff added to them must be reference type as a result.

* In comparison, the 'hashCode' method in HashMap compares the hash value of two objects to see if they're the same. (Remember that hash functions are used to assign objects to the hash table, and this allows quick lookup and comparison by running values through that hash function.) Strings and Integers have hashCodes, but other objects don't.
=> To get around this, you can setup a hashCode() method in an object to grab the exact hash location of an object in a hash table and thus make approximate comparisons.

SO: to use a class as a HashMap's key, define for it:
1. the equals method, so that all equal or approximately equal objects cause the comparison to return true and all false for all the rest
2. the hashCode method, so that as few objects as possible end up with the same hash value

GROUPING DATA USING HASHMAPS
You can attach ANY variable to a key or a value, even other lists! (Once more we inevitably approach the hash table.) You still have to declare a new ArrayList<>() when adding this way.

HashMap<String, ArrayList<String>> bookFavs = new HashMap<>();
bookFavs.put("Clarence", new ArrayList<>());
bookFavs.add("Clarence","Atlas Shrugged");
bookFavs.add("Clarence","The Jungle");

### PART 9
==CLASS INHERITANCE==
In object oriented programming, solutions rise from the interactions between objects that are created from classes.
=> Every object in Java is derived from the Object class, and in turn, have various subclasses. Take ArrayList:
java.lang.Object
	java.util.AbstractCollection<E>
		java.util.AbstractList<E>
			java.util.ArrayList<E>
			
This is *inheritance*, when subclasses inherit properties and behaviors from superclasses (such as equals and HashCode, that's why we had to override with our own).
=> When a subclass inherits from a superclass, this is called "extending".

Inheritance isn't ideal in every situation, but if a class has major overlap with another, along with its own properties, it might be ideal to extend it. The classic example:
public class Animal {
	public Animal(int legs) {
		//constructor
	}
	//common animal things
}

public class Dog extends Animal {
	private boolean fur;

	public Dog (int legs, boolean fur) {
		super(legs);
		this.fur = fur;
	}

	public void bark() {
		//print bark
	}
}

Dog can do all the things and has all the properties an Animal does, but it has its own unique properties and methods as well on top of that.
=This is also when access modifiers come into play. Public means anyone can see it, and private means no one can see it (not without a getter or setter). By using 'protected', you can expose these only to subclasses that extend the main class, but it's otherwise private.

The *SUPER* constructor calls on the constructor of the superclass (in this case, Animal). As a result it brings over the Animal's starting properties. You can also prefix superclass methods with super to call them. [IE: super.getName()]

This also allows you to use interface methods without defining them in the subclass. if Animal has makeNoise(), then Dog can do it too. You actually DON'T rewrite the method. If you need to OVERRIDE, THEN you define a new method.

=> Let's make a brief note about POLYMORPHISM:
For extended classes, executed methods is chosen based on the actual type of the object. This is because objects are *polymorphic* - they can be used by a variety of variable types.
-So basically: if you have a Student object that extends Person, and call toString on Student, it first looks in Student, and if that doesn't exist, it looks up at the next superclass in a hierarchy.

? WHEN TO USE INHERITANCE?
* It's best to use inheritance when the subclass needs to use all of the inherited functionality of the super class. AKA, a SPECIAL case of the super class.
* It's best to keep the inheritance hierarchy shallow, like two or three levels.
* If an object owns or is composed of other objects, don't use inheritance.
* Keep the Single Responsbility Principle in mind - a class should really have only one reason to change. Multiple responsibilities are best split into multiple classes. Otherwise, you might have to change way more stuff when making edits.

*ABTRACT CLASSES*
Abstract classes are like templates. They only allow subclasses to be extended from it - you can't mkake an instance of the template itself. It's good for when you need a basic template that people can build off safely in an OOP way.
-> Think of it like an interface, in a way. But these interfaces have object variables and constructors.

A good example:
You're building Lego ships. Your abstract class is the core ship itself. People then take this template, make a copy, and extend with their own unique things. My ship has like a missile bank, but her ship is more of a bomber. Yet they have the standard template core of a ship underneath. Saves time, easy reuse, offers structure.

public abstract class Spaceship {}

public class Starfighter extends Spaceship {}

The abstract keyword can be added to classes and methods. Abstract subclasses must implement abstract superclass methods.


==INTERFACES==
=> Define with 'public interface' for the class
=> then to implement: public class Book implements Readable
An interface defines behavior, but the classes defines how they're implemented.
An interface is a *contract of behavior.* Basically, it's saying classes will implement what's defined in the interface, such as methods and required values. As such, a class that uses an interface MUST implement what the interface defines.

TYPES: So an object is reference type, and implementing an interface adds another: an eBook object that implements Readable is both Ebook and Readable types.
METHOD PARAMETERS: You can also use an interface as a method parameter when calling a method.

EXAMPLE:
private ArrayList<Packable> packables;

public void add(Packable packable) {
    packables.add(packable);
}
This means that ANY object with the Packable type can be added to this ArrayList, even if they aren't the same type of object at all!

RETURN: You can also return interfaces from methods. One design pattern for OOP programming is called Factory that does this, building objects and interfaces and returning them accordingly. This allows the Factory to make new class interface implementations without having to know all the guts.

? WHY USE INTERFACES? ?
Interfaces help extend polymorphism, which is when objects can be used by a variety of variable types. This allows a lot of reusability - IE, they can implement the same interface and methods but have different outcomes. This extends OOP's goal of having reusable, modular objects, and it's a way for them to do a variety of things with the same initial guts, which means you only need to change one thing if time comes for them to change.
-They also reduce dependencies between classes. This way, if you're making changes or adding new classes, you can just add stuff that works and it won't mess with the interface. It's about REDUCING TOTAL WORK.
-> A class can also implement multiple interfaces as long as you implement each interface's required methods:

class Example implements FirstInterface, SecondInterface {}

=> COMMON INTERFACES
LIST: Basic functionality for ArrayList, LinkedList, but then these two things implement the interface in different ways. They both have their strengths and weaknesses but their core is the List interface.
MAP: Interface for HashMap and other hash tables; returns values with the Collection interface
SET: Interface for HashSet
COLLECTION: Common collection functionality, List and Set implements this interface for checking item existence and size


==OBJECT POLYMORPHISM==
Objects that use interfaces also inherit the interface's type along with classes it implements.
-A String object also has the Object type, since it inherits the Object class.
-Thus, you can pass in these preceding types into parameters if you just need their methods. You can also declare methods to take any objects that uses specific interfaces.

public class Printer {

    public void printManyTimes(Object object, int times) {
        int i = 0;
        while (i < times) {
            System.out.println(object);
            i = i + 1;
        }
    }

    public void printCharacters(CharSequence charSequence) {
        int i = 0;
        while (i < charSequence.length()) {
            System.out.println(charSequence.charAt(i));
            i = i + 1;
        }
    }
}

-Again, this is because they are POLYMORPHIC. They are made of different types and can have objects be used by these varying types which extends reusability for objects.


### PART 10
==HANDLING COLLECTIONS AS STREAMS==
In streams, you define a sequence of events that happen on each value in a collection. (Collections are lists, sets, maps, etc.)
* Remember MapReduce? Mapping a function to each value in a collection is basically working with them as a stream.

-> Use the stream() method, then attach other methods to it.
double average = inputs.stream()
    .mapToInt(s -> Integer.valueOf(s)) //convert each value in stream to int
    .average() //get the average of all the items in the stream
    .getAsDouble(); //return sum as double
	
LAMBDA EXPRESSIONS:
These are shorthand for functions that are anonymous, not really attached to a class or interface
EX: .filter(i -> i > 0) //this is equivalent to
filter(Integer i -> {
	if (i > 0) {
		return true;
	}
	return false;
})

You can also pass in class functions:
.filter(value -> Screeners:greaterThanFive(value))
or even as a parameter
.filter(Screeners::greaterThanFive)

STREAM METHODS
are either intermediate or terminal. It makes essentially a sublist and performs operations on it.
intermediate: they return a stream you can further work with (.map(), .filter())
terminal: they return a definite end value to process (.average(), .collect())

REDUCE
Here's a reduce function:
int sum = values.stream()
    .reduce(0, (previousSum, value) -> previousSum + value);
System.out.println(sum);

The syntax is reduce(*initialState*, (*previous*, *object*) -> *actions on the object*). So for above, it initially starts as 0. It takes the previous sum, also takes thed current value, then adds them together. Then this repeats with that sum becoming the new previous sum.

-> You can also do this on objects, paring them down and working with them as sub lists.

READING FILES
Use streams to create an input stream and process a row of lines one by one. Then you can use the Paths class to get a file path to read with the Files class.

Files.lines(Paths.get(file))
            .map(row -> row.split(","))
            .map(parts -> new Book(parts[0], Integer.valueOf(parts[1]), Integer.valueOf(parts[2]),parts[3]))
            .forEach(book -> books.add(book)); 


==COMPARABLE INTERFACE==
This interface defines compareTo: if a class implements it, it can be sorted with Java sorting algos.
-These methods return either positive, negative, or 0 in terms of sorting to create natural ordering.
-You can also use the sorted method for this, but remember, a stream will only sort the items in its sublist.
-> We can also use a lambda expression for sorting as well.

* The COMPARATOR class in Java also allows types of sorting: comparing and thenComparing based on when a value is passed, first or next. You can use this in the form of a stream as well, and you can call methods within comparing/thenComparing and compare their values accordingly.
Comparator<Book> compare = Comparator.comparing(Book::method1).thenComparing(Book::method2);

=> You can use Comparator to make a sorting class that uses the Comparator interface.
```
public class SortBySuit implements Comparator<Card> {
    public int compare(Card c1, Card c2) {
        return c1.getSuit().ordinal() - c2.getSuit().ordinal();
    }
}
```

==VARIOUS TECHNIQUES==
### STRINGBUILDER
So normally, when adding to strings, the usual method for Java is to create a new string, add to it with another created string, and then as it continues, it keeps copying the previous strings. The StringBuilder method solves this problem by making an object, appending content to it, then returning the string with a toString method. This helps improve performance.

StringBuilder numbers = new StringBuilder();
for (int i = 0; i < 5; i++) {
	numbers.append(i)
}
System.out.println(numbers.toString());

### REGULAR EXPRESSIONS
These let you compare strings against an expression which is basically another set of strings in a compact form. By using certain characters, you can check for strings or parts of strings in different areas of the string for comparison. Examples include:
-Alternation: 00|100|00 = vertical line
-Affecting part of a string: car(|s|) = parentheses around the section
-Quantifiers: 2{2,4} = brackert, check if a repeats b times
-Range of characters: [a-c] = brackets

Think of it like this: you're comparing one string to another, but your regex comparision string has these wildcards. 

### ENUMERATED TYPES (ENUM)
A certain data type where you can declare its possible values ahead of time, acting as its own type in addition to its normal stuff.
	public enum Suit {
		DIAMOND, SPADE, HEART, CLUB
	}
Access them like normal properties: Suit.DIAMOND for example
-you can compare them with ordinal(), and the value's position indicates its number.
^ Above, Suit.DIAMOND = 0, Suit.SPADE = 1, etc.
-you can also set object references with private constructors.

### ITERATOR
Any object that has the Collection interface also gets access to the Iterable interface. Essentially this interface lets you walk through a list, pointing at items one by one. It can check if there's still items in the list [hasNext()], what the next item's value is [next()], remove the previously next called item [remove()], etc.


### PART 11
==CLASS DIAGRAMS==
Class diagrams are used to model classes at a higher level, understanding relationships and connections between them. Often these are done in UML (Unified Modeling Language) to have a standard, but ultimately they're a tool - do what works best when diagramming to help with software architecture.

A class has a rectangle with the names of properties and methods. Each one either has a - in front (for a private method) and + for a public one. Constructors go next, methods go last.

public class Person {
	private String name;
	public int age;
	
	public Person(String initial name) {
		this.name = name;
		this.age = 0;
	}
	
	public void print() { /*code*/ }
}

|Person
-name: String name
+age: int
---
+Person(initialName: String)
+print(): void

Connections with other classes (for example, an ArrayList<Person> that refers to a Person class) are represented as an arrow pointing to the intended direction of data. (No arrow means both classes know about each other.) Use a star to represent multiples.
=> you might notice this is kind of like 1-1 or 1-many relationships in relational databases. What if...Tables were objects too?

* If a subclass inherits from a superclass, use an arrow with the arrowhead being a pronounced triangle.
* Abstract classes have <<abstract>> written in the title.
* Interfaces get <<interface>>. Use a dashed line for an interface.

==PACKAGES==
So packages are just groups of Java classes or libraries that have a common functionality or purpose. (In JS, remember, NPM alows package management.) The common Program class is part of the library package.
-Packages can have sub-packages.
-import statements bring in classes. For example, import java.util.ArrayList means access ArrayList, inside of the util package, which is inside of the java package.

These packages are typically kept in src/main/java and show up as folders within them. This is where the source code for a program is contained.

ACCESS MODIFIERS
Private and public work as normal, but without an access modifier, the default access is everything else within that same package only.

==EXCEPTIONS==
Exceptions get thrown when a program ends with an error. Java has a lot of these premade, but we can define our own with `try {} catch (Exception e) {}`. This lets us define things that happen when exceptions are thrown.

	try {
		//code
	} catch (Exception e) {
		//code that only runs in this instance
	}

Instead of handling it, a method can throw the Exception back up to who called it, and this can go up each level all the way to the JVM. 

	public int function() throws Exception {
		//code, etc.
	}

They also have the throw method:
	throw new IllegalArgumentException("Illegal argument");
	
-Some exceptions don't need to be handled with try/catch.

-Classes that use interfaces that throw exceptions must also implement them.

The actual error is stored in the Exception e variable of a catch block. On this class, you can run printStackTrace(), then read from the bottom up, to find how the exception got throw.

==PROCESSING FILES==
PrintWriter is a class that lets you write to a file. Its constructor is a String that's the location of the target file. It must have its error exception handled by a try/catch block or passed elsewhere.

THIS WILL WIPE THE CONTENTS. To APPEND to an existing file, use FileWriter.


### PART 12

==TYPE PARAMETERS AND GENERICS==
So a GENERIC is a class that can store a type as a parameter; more importantly, WHAT that type is is determined at compile time and doesn't need to be chosen ahead. This is used to build things like ArrayList<String> or hashmaps: notice that they can be ANY type, which means they were implemented as generics so you can feed whatever into it.

public class Locker<T> {
	private T element; //property of a generic type
	
	public void setValue(T element) {
		this.element = element; //take a generic type and assign it to the property
	}
}

Now, if you were to do something like:
Locker<Integer> locker = new Locker<>();

At runtime, the new object's element property gets armed so now it'll take Int parameters for its type. You can guess the huge flexibility you get with this.

Generic interfaces work much in the same way. Classes that implemement generic interfaces can either declare the type in their implementation, or pass it up to the interface in the class definition.

	public interface List<T> {
		void add(T value);
		T get(int index);
		T remove(int index);
	}
	
	public class MovieList implements List<T> {}


==ARRAYLIST AND HASH TABLE==
ARRAY: Set length of memory for inserting values of a data type: usually set in stone when it's made outside of certain implementations; each space in the array has an index where it talks to the pointer in memory that leads to the memory location of that data.
-Java's ArrayList has features that work around this.

Arrays are often used inside other data structures. This chapter builds its own interpretations of ArrayList and HashMap to demonstrate how arrays come into play.

# LISTS
If you were to build your own version of ArrayList, you'd need to consider add, contains, remove, and get functions. You would also need to add the ability for the array to grow in size as stuff gets added to it, otherwise you'd run into errors (because normally an array's size is set in stone and to grow it, you need to make a new array and reassign the values).

- By using type parameters your build can take any type of values for constructing.
- For adding, you track the index, add the new value to the array, then up the value for the next available free index in order, starting from 0.
- For growing the array, you take the existing size, make a new array that has more size, then iterate, copying the old array to the new one, before assigning the new one to the class instance. (In Java this is oldSize + oldSize / 2.) [Of course, due to big O notation, this can be slow for huge arrays.]
- To check for a value: iterate through the array and return true if the value is found.
- Removing is more complicated, because you must iterate to find a value, remove it, then shrink the resulting array by moving the values left to fill the gap.

So ArrayList does this build BUT adds other things to optimize these methods for speed.

# HASH MAP
A hash map is an array where each item is a list of key/value pairs (like mini arrays basically). When a hash map item is set, a hash code is calculated that corresponds with the index of that hash map. This way we can assign codes that aren't alike and allows for easier searching. The trick is finding a way to insert all the items so they don't bunch up against each other, to spread them out for quicker searching. This is still way faster than doing this as an array list.

To replicate a Hash Map build, you'd need to consider the array methods, as well as use type parameters to create a Pair object for keys and values of whatever type is needed at runtime.

- Get gets that pair's unique hash code and iterates to find it.
- Adding finds the pair's hash code and updating the existing value or making a new one.
- Still need to grow the array for these hashes.
- Remove: kill the value at the index equivalent to the hash code.

# SEARCH PERFORMANCE
You can measure system time with System.nanotime()
Remember: lists are better for sorting, hashes are better for searching. As a rule of thumb, of course, in terms of big O performance.

==RANDOMNESS==
Random() lets you roll numbers provided to it.
Random random = new Random();
int result = random.nextInt(11); //roll a number between 0-10

nextInt = roll numbers
nextDouble = roll doubles

Of course, we can't generate TRUE random numbers, but most of the time our psuedorandom rolls are good enough, outside of very specific scientific calculations.

==MULTIDIMENSIONAL DATA==
Arrays can be multidimensional.
Declare: int [][] tableArray = new int[2][3];
//a table with two rows and three columns.

Then:
tableArray[0][1] = 4;
tableArray[1][1] = 7;

And so on. To access, do a for loop for each row and then another for each column.
for (int i = 0; i <= tableArray.length; i++) {
	for (int j = 0; j <= tableArray[row].length; j++) {
		//print value
	}
}

Remember: you did this when you were doing CS50 to make the Mario blocks.


### PART 13
==GRAPHICAL USER INTERFACES
We use pre-written graphical user interface libraries to draw text, buttons, windows, and more. JavaFX is the most modern standard GUI library - in the past, people used Swing.

GUIs are arranged in three parts:
1. The Stage object, usually a window
2. The Scene object, which is kept in the stage and is usually responsible for the object that controls component layout
3. UI components added as children to FlowPane, the object that sets the layout for them

Make groupings.
-Then assign them to the scene: Scene(Flow)
--then attach the scene to the stage: stage.setScene(scene)

==UI COMPONENTS AND LAYOUT
Different components include Buttons, Labels, etc.
Tree Table View: drop-down hierarchy of items

Components are set within classes that automatically arrange them based on their type.
-FlowPane sets them side by side and it's responsive.
-BorderPane does it on the border.
-HBox lays it out in a row
-GridPane does it in a grid.

-> You can combine layouts in a single interface.
EXAMPLE: an HBox and a VBox, assigned to the top and bottom of a BorderPane, respectively, then added to the scene, then set to the stage.

==EVENT HANDLING
Event handlers are attached to components. They listen for user interaction, such as text being entered, or a button being pressed, and then they fire off code in response. In Java, this is an interface, and for specific events, you define the implementation.

==LAUNCH PARAMETERS

==MULTIPLE VIEWS

### PART 14

